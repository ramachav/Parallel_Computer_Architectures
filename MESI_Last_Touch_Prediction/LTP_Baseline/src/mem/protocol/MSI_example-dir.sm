/*
 * Copyright (c) 2009-2012 Mark D. Hill and David A. Wood
 * Copyright (c) 2010-2012 Advanced Micro Devices, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

machine(MachineType:Directory, "Directory protocol")
    : DirectoryMemory * directory;
      Cycles directory_latency := 12;
      Cycles to_memory_controller_latency := 1;

    // Forwarding requests from the directory *to* the caches.
    MessageBuffer *forwardFromDir, network="To", virtual_network="3",
          vnet_type="forward";
    // Response from the directory *to* the cache.
    MessageBuffer *responseFromDir, network="To", virtual_network="4",
          vnet_type="response";
      MessageBuffer * dmaResponseFromDir, network="To", virtual_network="1",
            vnet_type="response";

    // Requests *from* the cache to the directory
    MessageBuffer *requestToDir, network="From", virtual_network="2",
          vnet_type="request";

    // Responses *from* the cache to the directory
    MessageBuffer *responseFromCache, network="From", virtual_network="4",
          vnet_type="response";
	  
    MessageBuffer * dmaRequestToDir, network="From", virtual_network="0",
          vnet_type="request";

    // Special buffer for memory responses. Kind of like the mandatory queue
    MessageBuffer *responseFromMemory;

{
    // For many thins in SLICC you can specify a default. However, this default
    // must use the C++ name (mangled SLICC name). For the state below you have
    // to use the controller name and the name we use for states.
    state_declaration(State, desc="Directory states",
                      default="Directory_State_I") {
        // Stable states.
        // NOTE: Thise are "cache-centric" states like in Sorin et al.
        // However, The access permissions are memory-centric.
        I, AccessPermission:Read_Write,  desc="Invalid in the caches.";
        S, AccessPermission:Read_Only,   desc="At least one cache has the blk";
        M, AccessPermission:Invalid,     desc="A cache has the block in M";

        // Transient states
        S_D, AccessPermission:Busy,      desc="Moving to S, but need data";

        // Waiting for data from memory
        S_m, AccessPermission:Read_Write, desc="In S waiting for mem";
        M_m, AccessPermission:Read_Write, desc="Moving to M waiting for mem";

        // Waiting for write-ack from memory
        MI_m, AccessPermission:Busy,       desc="Moving to I waiting for ack";
        SS_m, AccessPermission:Busy,       desc="Moving to I waiting for ack";

	// DMA Related States
	M_DRD, AccessPermission:Busy, desc="Blocked for a DMA read";
    	M_DWR, AccessPermission:Busy, desc="Blocked on an invalidation for a DMA write";
	S_DRD, AccessPermission:Busy, desc="Blocked for a DMA read";
    	S_DWR, AccessPermission:Busy, desc="Blocked on an invalidation for a DMA write";

    	M_DWRI, AccessPermission:Busy, desc="Intermediate state M_DWR-->I"; 
    	M_DRDI, AccessPermission:Busy, desc="Intermediate state M_DRD-->S";
	ID, AccessPermission:Busy, desc="Intermediate state for DMA_READ when in I";
    	ID_W, AccessPermission:Busy, desc="Intermediate state for DMA_WRITE when in I";
    }

    enumeration(Event, desc="Directory events") {
        // Data requests from the cache
        GetS,         desc="Request for read-only data from cache";
        GetM,         desc="Request for read-write data from cache";

        // Writeback requests from the cache
        PutSNotLast,  desc="PutS and the block has other sharers";
        PutSLast,     desc="PutS and the block has no other sharers";
        PutMOwner,    desc="Dirty data writeback from the owner";
        PutMNonOwner, desc="Dirty data writeback from non-owner";

        // Cache responses
        Data,         desc="Response to fwd request with data";

	// DMA requests
    	DMA_READ, desc="A DMA Read memory request";
    	DMA_WRITE, desc="A DMA Write memory request";

        // From Memory
        MemData,      desc="Data from memory";
        MemAck,       desc="Ack from memory that write is complete";
    }

    // NOTE: We use a netdest for the sharers and the owner so we can simply
    // copy the structure into the message we send as a response.
    structure(Entry, desc="...", interface="AbstractEntry") {
        State DirState,         desc="Directory state";
        NetDest Sharers,        desc="Sharers for this block";
        NetDest Owner,          desc="Owner of this block";
    }

    // TBE entries for DMA requests
    structure(TBE, desc="TBE entries for outstanding DMA requests") {
      Addr PhysicalAddress, desc="physical address";
      State TBEState,        desc="Transient State";
      DataBlock DataBlk,     desc="Data to be written (DMA write only)";
      int Len,               desc="...";
      MachineID DmaRequestor, desc="DMA requestor";
    }

    structure(TBETable, external="yes") {
      TBE lookup(Addr);
      void allocate(Addr);
      void deallocate(Addr);
      bool isPresent(Addr);
    }
    
    // ** OBJECTS **
    TBETable TBEs, template="<Directory_TBE>", constructor="m_number_of_TBEs";
    Tick clockEdge();
    Cycles ticksToCycles(Tick t);
    Tick cyclesToTicks(Cycles c);
    void set_tbe(TBE b);
    void unset_tbe();
    
    // This either returns the valid directory entry, or, if it hasn't been
    // allocated yet, this allocates the entry. This may save some host memory
    // since this is lazily populated.
    Entry getDirectoryEntry(Addr addr), return_by_pointer = "yes" {
        Entry dir_entry := static_cast(Entry, "pointer", directory[addr]);
        if (is_invalid(dir_entry)) {
            // This first time we see this address allocate an entry for it.
            dir_entry := static_cast(Entry, "pointer",
                                     directory.allocate(addr, new Entry));
        }
        return dir_entry;
    }

    /*************************************************************************/
    // Functions that we need to define/override to use our specific structures
    // in this implementation.
    
    State getState(TBE tbe, Addr addr) {
    	if(is_valid(tbe)) {
	    return tbe.TBEState;
	}
        else if (directory.isPresent(addr)) {
            return getDirectoryEntry(addr).DirState;
        } else {
            return State:I;
        }
    }

    void setState(TBE tbe, Addr addr, State state) {
    	if (is_valid(tbe)) {
      	    tbe.TBEState := state;
     	} 
        if (directory.isPresent(addr)) {
            if (state == State:M) {
                DPRINTF(RubySlicc, "Owner %s\n", getDirectoryEntry(addr).Owner);
                assert(getDirectoryEntry(addr).Owner.count() == 1);
                assert(getDirectoryEntry(addr).Sharers.count() == 0);
            }
            getDirectoryEntry(addr).DirState := state;
            if (state == State:I)  {
                assert(getDirectoryEntry(addr).Owner.count() == 0);
                assert(getDirectoryEntry(addr).Sharers.count() == 0);
            }
        }
    }

    // This is really the access permissions of memory.
    AccessPermission getAccessPermission(Addr addr) {
    	TBE tbe := TBEs[addr];
	if(is_valid(tbe)) {
      	    return Directory_State_to_permission(tbe.TBEState);
    	}
        if (directory.isPresent(addr)) {
            Entry e := getDirectoryEntry(addr);
            return Directory_State_to_permission(e.DirState);
        } else  {
            return AccessPermission:NotPresent;
        }
    }
    void setAccessPermission(Addr addr, State state) {
        if (directory.isPresent(addr)) {
            Entry e := getDirectoryEntry(addr);
            e.changePermission(Directory_State_to_permission(state));
        }
    }

    void functionalRead(Addr addr, Packet *pkt) {
    	 TBE tbe := TBEs[addr];
    	 if(is_valid(tbe)) {
      	     testAndRead(addr, tbe.DataBlk, pkt);
    	 } else {
    	     functionalMemoryRead(pkt);
	 }
    }

    // This returns the number of writes. So, if we write then return 1
    int functionalWrite(Addr addr, Packet *pkt) {
    	int num_functional_writes := 0;
	
    	TBE tbe := TBEs[addr];
	if(is_valid(tbe)) {
      	    num_functional_writes := num_functional_writes + testAndWrite(addr, tbe.DataBlk, pkt);
    	}

        num_functional_writes := num_functional_writes + functionalMemoryWrite(pkt);
        return num_functional_writes;
    }


    /*************************************************************************/
    // Network ports

    out_port(forward_out, RequestMsg, forwardFromDir);
    out_port(response_out, ResponseMsg, responseFromDir);
    out_port(requestQueue_out, ResponseMsg, requestToDir); // For recycling requests
    out_port(dmaResponseNetwork_out, DMAResponseMsg, dmaResponseFromDir);
    

    in_port(memQueue_in, MemoryMsg, responseFromMemory) {
        if (memQueue_in.isReady(clockEdge())) {
            peek(memQueue_in, MemoryMsg) {
	    	TBE tbe := TBEs[in_msg.addr];
                if (in_msg.Type == MemoryRequestType:MEMORY_READ) {
                    trigger(Event:MemData, in_msg.addr, tbe);
                } else if (in_msg.Type == MemoryRequestType:MEMORY_WB) {
                    trigger(Event:MemAck, in_msg.addr, tbe);
                } else {
                    error("Invalid message");
                }
            }
        }
    }

    in_port(response_in, ResponseMsg, responseFromCache) {
        if (response_in.isReady(clockEdge())) {
            peek(response_in, ResponseMsg) {
	    	TBE tbe := TBEs[in_msg.addr];
                if (in_msg.Type == CoherenceResponseType:Data) {
                    trigger(Event:Data, in_msg.addr, tbe);
                } else {
                    error("Unexpected message type.");
                }
            }
        }
    }

    in_port(dmaRequestQueue_in, DMARequestMsg, dmaRequestToDir) {
    	if (dmaRequestQueue_in.isReady(clockEdge())) {
      	  peek(dmaRequestQueue_in, DMARequestMsg) {
            TBE tbe := TBEs[in_msg.LineAddress];
            if (in_msg.Type == DMARequestType:READ) {
                trigger(Event:DMA_READ, in_msg.LineAddress, tbe);
            } else if (in_msg.Type == DMARequestType:WRITE) {
                trigger(Event:DMA_WRITE, in_msg.LineAddress, tbe);
            } else {
                error("Invalid message");
            }
          }
        }
    }

    in_port(request_in, RequestMsg, requestToDir) {
        if (request_in.isReady(clockEdge())) {
            peek(request_in, RequestMsg) {
        	TBE tbe := TBEs[in_msg.addr];
                Entry e := getDirectoryEntry(in_msg.addr);
                if (in_msg.Type == CoherenceRequestType:GetS) {
                    trigger(Event:GetS, in_msg.addr, tbe);
                } else if (in_msg.Type == CoherenceRequestType:GetM) {
                    trigger(Event:GetM, in_msg.addr, tbe);
                } else if (in_msg.Type == CoherenceRequestType:PutS) {
                    assert(is_valid(e));
                    // If there is only a single sharer (i.e., the requestor)
                    if (e.Sharers.count() == 1) {
                        assert(e.Sharers.isElement(in_msg.Requestor));
                        trigger(Event:PutSLast, in_msg.addr, tbe);
                    } else {
                        trigger(Event:PutSNotLast, in_msg.addr, tbe);
                    }
                } else if (in_msg.Type == CoherenceRequestType:PutM) {
                    assert(is_valid(e));
                    if (e.Owner.isElement(in_msg.Requestor)) {
                        trigger(Event:PutMOwner, in_msg.addr, tbe);
                    } else {
                        trigger(Event:PutMNonOwner, in_msg.addr, tbe);
                    }
                } else {
                    error("Unexpected message type.");
                }
            }
        }
    }



    /*************************************************************************/
    // Actions

    // Memory actions.

    action(sendMemRead, "r", desc="Send a memory read request") {
        peek(request_in, RequestMsg) {
            // Special function from AbstractController that will send a new
            // packet out of the "Ruby" black box to the memory side. At some
            // point the response will be on the memory queue.
            // Like enqeue, this takes a latency for the request.
            queueMemoryRead(in_msg.Requestor, address, to_memory_controller_latency);
        }
    }

    action(sendDataToMem, "w", desc="Write data to memory") {
        peek(request_in, RequestMsg) {
            DPRINTF(RubySlicc, "Writing memory for %#x\n", address);
            DPRINTF(RubySlicc, "Writing %s\n", in_msg.DataBlk);
            queueMemoryWrite(in_msg.Requestor, address, to_memory_controller_latency,
                             in_msg.DataBlk);
        }
    }

    action(sendRespDataToMem, "rw", desc="Write data to memory from resp") {
        peek(response_in, ResponseMsg) {
            DPRINTF(RubySlicc, "Writing memory for %#x\n", address);
            DPRINTF(RubySlicc, "Writing %s\n", in_msg.DataBlk);
            queueMemoryWrite(in_msg.Sender, address, to_memory_controller_latency,
                             in_msg.DataBlk);
        }
    }

    // Sharer/owner actions

    action(addReqToSharers, "aS", desc="Add requestor to sharer list") {
        peek(request_in, RequestMsg) {
            getDirectoryEntry(address).Sharers.add(in_msg.Requestor);
        }
    }

    action(setOwner, "sO", desc="Set the owner") {
        peek(request_in, RequestMsg) {
            getDirectoryEntry(address).Owner.add(in_msg.Requestor);
        }
    }

    action(addOwnerToSharers, "oS", desc="Add the owner to sharers") {
        Entry e := getDirectoryEntry(address);
        assert(e.Owner.count() == 1);
        e.Sharers.addNetDest(e.Owner);
    }

    action(removeReqFromSharers, "rS", desc="Remove requestor from sharers") {
        peek(request_in, RequestMsg) {
            getDirectoryEntry(address).Sharers.remove(in_msg.Requestor);
        }
    }

    action(clearSharers, "cS", desc="Clear the sharer list") {
        getDirectoryEntry(address).Sharers.clear();
    }

    action(clearOwner, "cO", desc="Clear the owner") {
        getDirectoryEntry(address).Owner.clear();
    }

    // Invalidates and forwards

    action(sendInvToSharers, "i", desc="Send invalidate to all sharers") {
        peek(request_in, RequestMsg) {
            enqueue(forward_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:Inv;
                out_msg.Requestor := in_msg.Requestor;
                out_msg.Destination := getDirectoryEntry(address).Sharers;
                out_msg.MessageSize := MessageSizeType:Control;
            }
        }
    }

    action(sendFwdGetS, "fS", desc="Send forward getS to owner") {
        assert(getDirectoryEntry(address).Owner.count() == 1);
        peek(request_in, RequestMsg) {
            enqueue(forward_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:GetS;
                out_msg.Requestor := in_msg.Requestor;
                out_msg.Destination := getDirectoryEntry(address).Owner;
                out_msg.MessageSize := MessageSizeType:Control;
            }
        }
    }

    action(sendFwdGetM, "fM", desc="Send forward getM to owner") {
        assert(getDirectoryEntry(address).Owner.count() == 1);
        peek(request_in, RequestMsg) {
            enqueue(forward_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:GetM;
                out_msg.Requestor := in_msg.Requestor;
                out_msg.Destination := getDirectoryEntry(address).Owner;
                out_msg.MessageSize := MessageSizeType:Control;
            }
        }
    }

    // Responses to requests

    // This also needs to send along the number of sharers!!!!
    action(sendDataToReq, "d", desc="Send data from memory to requestor. ") {
                                    //"May need to send sharer number, too") {
        peek(memQueue_in, MemoryMsg) {
            enqueue(response_out, ResponseMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceResponseType:Data;
                out_msg.Sender := machineID;
                out_msg.Destination.add(in_msg.OriginalRequestorMachId);
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.MessageSize := MessageSizeType:Data;
                Entry e := getDirectoryEntry(address);
                // Only need to include acks if we are the owner.
                if (e.Owner.isElement(in_msg.OriginalRequestorMachId)) {
                    out_msg.Acks := e.Sharers.count();
                } else {
                    out_msg.Acks := 0;
                }
                assert(out_msg.Acks >= 0);
            }
        }
    }

    action(sendPutAck, "a", desc="Send the put ack") {
        peek(request_in, RequestMsg) {
            enqueue(forward_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:PutAck;
                out_msg.Requestor := machineID;
                out_msg.Destination.add(in_msg.Requestor);
                out_msg.MessageSize := MessageSizeType:Control;
            }
        }
    }

    // Queue management

    action(popResponseQueue, "pR", desc="Pop the response queue") {
        response_in.dequeue(clockEdge());
    }

    action(popRequestQueue, "pQ", desc="Pop the request queue") {
        request_in.dequeue(clockEdge());
    }

    action(popMemQueue, "pM", desc="Pop the memory queue") {
        memQueue_in.dequeue(clockEdge());
    }

    // Stalling actions
    action(stall, "s", desc="Stall the incoming request") {
        // Do nothing.
    }

    //DMA Related Requests and Responses
    
    action(allocateTBE, "v", desc="Allocate TBE") {
    peek(dmaRequestQueue_in, DMARequestMsg) {
      TBEs.allocate(address);
      set_tbe(TBEs[address]);
      tbe.DataBlk := in_msg.DataBlk;
      tbe.PhysicalAddress := in_msg.PhysicalAddress;
      tbe.Len := in_msg.Len;
      tbe.DmaRequestor := in_msg.Requestor;
    }
    }

    action(sendCacheInvalidateSharers, "sinv", desc="Invalidate a cache block if shared in the directory") {
    peek(dmaRequestQueue_in, DMARequestMsg) {
      enqueue(forward_out, RequestMsg, directory_latency) {
        out_msg.addr := address;
        out_msg.Type := CoherenceRequestType:Inv;
        out_msg.Requestor := machineID;
        out_msg.Destination := getDirectoryEntry(address).Sharers;
        out_msg.MessageSize := MessageSizeType:Writeback_Control;
      }
    }
    }

    action(sendCacheInvalidateOwner, "oinv", desc="Invalidate a cache block if dirty in the directory") {
    peek(dmaRequestQueue_in, DMARequestMsg) {
      enqueue(forward_out, RequestMsg, directory_latency) {
        out_msg.addr := address;
        out_msg.Type := CoherenceRequestType:Inv;
        out_msg.Requestor := machineID;
        out_msg.Destination := getDirectoryEntry(address).Owner;
        out_msg.MessageSize := MessageSizeType:Writeback_Control;
      }
    }
    }
    
    action(popDMARequestQueue, "p", desc="Pop incoming DMA queue") {
    dmaRequestQueue_in.dequeue(clockEdge());
    }

    action(queueMemoryWBRequest_partialTBE, "qwt", desc="Queue off-chip writeback request") {
    peek(request_in, RequestMsg) {
      queueMemoryWrite(in_msg.Requestor, address, to_memory_controller_latency, tbe.DataBlk);
    }
    }

    action(sendPutAckReq, "ra", desc="Send the put ack to requestor") {
        peek(memQueue_in, MemoryMsg) {
            enqueue(forward_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:PutAck;
                out_msg.Requestor := in_msg.OriginalRequestorMachId;
                out_msg.Destination.add(in_msg.OriginalRequestorMachId);
                out_msg.MessageSize := MessageSizeType:Control;
            }
        }
    }

    action(sendDMAAck, "da", desc="Send Ack to DMA controller") {
      enqueue(dmaResponseNetwork_out, DMAResponseMsg, 1) {
        assert(is_valid(tbe));
        out_msg.PhysicalAddress := address;
        out_msg.LineAddress := address;
        out_msg.Type := DMAResponseType:ACK;
        out_msg.Destination.add(tbe.DmaRequestor); 
        out_msg.MessageSize := MessageSizeType:Writeback_Control;
      }
    }

    action(deallocateTBE, "dt", desc="Deallocate TBE") {
    TBEs.deallocate(address);
    unset_tbe();
    }

    action(sendDMADataPutM, "drp", desc="Send Data to DMA controller from incoming PutM") {
    peek(request_in, RequestMsg) {
      enqueue(dmaResponseNetwork_out, DMAResponseMsg, 1) {
        assert(is_valid(tbe));
        out_msg.PhysicalAddress := address;
        out_msg.LineAddress := address;
        out_msg.Type := DMAResponseType:DATA;
        out_msg.DataBlk := in_msg.DataBlk;
        out_msg.Destination.add(tbe.DmaRequestor);
        out_msg.MessageSize := MessageSizeType:Response_Data;
      }
    }
    }

    action(sendDMAData, "dr", desc="Send Data to DMA controller from directory") {
    peek(memQueue_in, MemoryMsg) {
      enqueue(dmaResponseNetwork_out, DMAResponseMsg, 1) {
        assert(is_valid(tbe));
        out_msg.PhysicalAddress := address;
        out_msg.LineAddress := address;
        out_msg.Type := DMAResponseType:DATA;
        out_msg.DataBlk := in_msg.DataBlk;  
        out_msg.Destination.add(tbe.DmaRequestor);
        out_msg.MessageSize := MessageSizeType:Response_Data;
      }
    }
    }

    action(queueMemoryWBRequest, "lq", desc="Write PutM data to memory") {
    peek(request_in, RequestMsg) {
      queueMemoryWrite(in_msg.Requestor, address, to_memory_controller_latency, in_msg.DataBlk);
    }
    }

    action(queueMemoryFetchRequestDMA, "qfd", desc="Queue off-chip fetch request") {
    peek(dmaRequestQueue_in, DMARequestMsg) {
      queueMemoryRead(in_msg.Requestor, address, to_memory_controller_latency);
    }
    }

    action(allocateTbeForDmaRead, "drt", desc="Allocate TBE for DMA Read") {
    peek(dmaRequestQueue_in, DMARequestMsg) {
      TBEs.allocate(address);
      set_tbe(TBEs[address]);
      tbe.DmaRequestor := in_msg.Requestor;
    }
    }

    action(queueMemoryWBRequest_partial, "qwp", desc="Queue off-chip writeback request") {
    peek(dmaRequestQueue_in, DMARequestMsg) {
      queueMemoryWrite(in_msg.Requestor, address, to_memory_controller_latency, in_msg.DataBlk);
    }
    }

    action(recycleRequestQueue, "z", desc="recycle request queue") {
    request_in.recycle(clockEdge(), cyclesToTicks(recycle_latency));
    }

    action(recycleDMARequestQueue, "y", desc="recycle dma request queue") {
    dmaRequestQueue_in.recycle(clockEdge(), cyclesToTicks(recycle_latency));
    }

    /*************************************************************************/
    // transitions

    transition({I, S}, GetS, S_m) {
        sendMemRead;
        addReqToSharers;
        popRequestQueue;
    }
    
    transition({M_DRD, M_DWR, M_DWRI, M_DRDI}, {GetM, GetS}) {
        recycleRequestQueue;
    }
    
    transition({ID, ID_W}, {DMA_READ, DMA_WRITE} ) {
    	recycleDMARequestQueue;
    }
    
    transition(I, {PutSNotLast, PutSLast, PutMNonOwner}) {
        sendPutAck;
        popRequestQueue;
    }

    transition(S_m, MemData, S) {
        sendDataToReq;
        popMemQueue;
    }

    transition(I, GetM, M_m) {
        sendMemRead;
        setOwner;
        popRequestQueue;
    }

    transition(M_m, MemData, M) {
        sendDataToReq;
        clearSharers; // NOTE: This isn't *required* in some cases.
        popMemQueue;
    }

    transition(S, GetM, M_m) {
        sendMemRead;
        removeReqFromSharers;
        sendInvToSharers;
        setOwner;
        popRequestQueue;
    }

    transition({S, S_D, SS_m, S_m}, {PutSNotLast, PutMNonOwner}) {
        removeReqFromSharers;
        sendPutAck;
        popRequestQueue;
    }

    transition(S, PutSLast, I) {
        removeReqFromSharers;
        sendPutAck;
        popRequestQueue;
    }

    transition(M, GetS, S_D) {
        sendFwdGetS;
        addReqToSharers;
        addOwnerToSharers;
        clearOwner;
        popRequestQueue;
    }

    transition(M, GetM) {
        sendFwdGetM;
        clearOwner;
        setOwner;
        popRequestQueue;
    }

    transition({M, M_m, MI_m}, {PutSNotLast, PutSLast, PutMNonOwner}) {
        sendPutAck;
        popRequestQueue;
    }

    transition(M, PutMOwner, MI_m) {
        sendDataToMem;
        clearOwner;
        sendPutAck;
        popRequestQueue;
    }

    transition(MI_m, MemAck, I) {
        popMemQueue;
    }

    transition(S_D, {GetS, GetM}) {
        stall;
    }

    transition(S_D, PutSLast) {
        removeReqFromSharers;
        sendPutAck;
        popRequestQueue;
    }

    transition(S_D, Data, SS_m) {
        sendRespDataToMem;
        popResponseQueue;
    }

    transition(SS_m, MemAck, S) {
        popMemQueue;
    }

    transition(M, DMA_WRITE, M_DWR) {
        allocateTBE;
    	sendCacheInvalidateOwner;
    	popDMARequestQueue;
    }

    transition(M_DWR, PutMOwner, M_DWRI) {
        queueMemoryWBRequest_partialTBE;
    	clearOwner;
    	popRequestQueue;
    }

    transition(M_DWRI, MemAck, I) {
        sendPutAckReq;
        sendDMAAck;
        deallocateTBE;
        popMemQueue;
    }

    transition(M, DMA_READ, M_DRD) {
        allocateTBE;
    	popDMARequestQueue;
    }

    transition(M_DRD, PutMOwner, M_DRDI) {     
        sendDMADataPutM;
        clearOwner;
        queueMemoryWBRequest;
        popRequestQueue;
    }

    transition(M_DRDI, MemAck, S) {
        sendPutAckReq;
        deallocateTBE;   
        popMemQueue;
    }

    transition(I, DMA_READ, ID) {
        allocateTbeForDmaRead;
    	queueMemoryFetchRequestDMA;
    	popDMARequestQueue;
    }

    transition(ID, MemData, I) {
        sendDMAData;
        deallocateTBE;
        popMemQueue;
    }
  
    transition(I, DMA_WRITE, ID_W) {
        allocateTBE;
        queueMemoryWBRequest_partial;
        popDMARequestQueue;
    }

    transition(S, DMA_WRITE, S_DWR) {
    	allocateTBE;
	sendCacheInvalidateSharers;
	queueMemoryWBRequest_partial;
	popDMARequestQueue;
    }
    
    transition({S_DWR, ID_W}, MemAck, I) {
        sendDMAAck;
    	deallocateTBE;
    	popMemQueue;
    }

    transition(S, DMA_READ, S_DRD) {
    	allocateTbeForDmaRead;
    	queueMemoryFetchRequestDMA;
    	popDMARequestQueue;
    }

    transition(S_DRD, MemData, S) {
        sendDMAData;
        deallocateTBE;
        popMemQueue;
    }

    // If we get another request for a block that's waiting on memory,
    // stall that request.
    transition({MI_m, SS_m, S_m, M_m}, {GetS, GetM}) {
        stall;
    }

}
